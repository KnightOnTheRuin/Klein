<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.klein.dao.HotelDao">

    <resultMap id="BaseResultMap" type="com.example.klein.entity.Hotel">
        <!--@Table hotel-->
        <result property="hotelId" column="hotelId" jdbcType="INTEGER"/>
        <result property="hotelName" column="hotelName" jdbcType="VARCHAR"/>
        <result property="startLevel" column="startLevel" jdbcType="INTEGER"/>
        <result property="phoneNumber" column="phoneNumber" jdbcType="VARCHAR"/>
        <result property="address" column="address" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          hotelId, hotelName, startLevel, phoneNumber, address
        from hotel
        where hotelId = #{hotelId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          hotelId, hotelName, startLevel, phoneNumber, address
        from hotel
        <where>
            <if test="hotelId != null">
                and hotelId = #{hotelId}
            </if>
            <if test="hotelName != null and hotelName != ''">
                and hotelName = #{hotelName}
            </if>
            <if test="startLevel != null">
                and startLevel = #{startLevel}
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                and phoneNumber = #{phoneNumber}
            </if>
            <if test="address != null and address != ''">
                and address = #{address}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          hotelId, hotelName, startLevel, phoneNumber, address
        from klein.hotel
    </select>
    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from hotel
        <where>
            <if test="hotelId != null">
                and hotelId = #{hotelId}
            </if>
            <if test="hotelName != null and hotelName != ''">
                and hotelName = #{hotelName}
            </if>
            <if test="startLevel != null">
                and startLevel = #{startLevel}
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                and phoneNumber = #{phoneNumber}
            </if>
            <if test="address != null and address != ''">
                and address = #{address}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="hotelId" useGeneratedKeys="true">
        insert into hotel(hotelName, startLevel, phoneNumber, address)
        values (#{hotelName}, #{startLevel}, #{phoneNumber}, #{address})
    </insert>

    <insert id="insertBatch" keyProperty="hotelId" useGeneratedKeys="true">
        insert into hotel(hotelName, startLevel, phoneNumber, address)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.hotelName}, #{entity.startLevel}, #{entity.phoneNumber}, #{entity.address})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="hotelId" useGeneratedKeys="true">
        insert into hotel(hotelName, startLevel, phoneNumber, address)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.hotelName}, #{entity.startLevel}, #{entity.phoneNumber}, #{entity.address})
        </foreach>
        on duplicate key update
        hotelName = values(hotelName),
        startLevel = values(startLevel),
        phoneNumber = values(phoneNumber),
        address = values(address)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update hotel
        <set>
            <if test="hotelName != null and hotelName != ''">
                hotelName = #{hotelName},
            </if>
            <if test="startLevel != null">
                startLevel = #{startLevel},
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                phoneNumber = #{phoneNumber},
            </if>
            <if test="address != null and address != ''">
                address = #{address},
            </if>
        </set>
        where hotelId = #{hotelId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from hotel where hotelId = #{hotelId}
    </delete>
    <!--通过星级查询酒店-->
    <select id="queryByStartLevel" resultMap="BaseResultMap">
        select
            hotelId, hotelName, startLevel, phoneNumber, address
        from hotel
        where startLevel=#{startLevel}
    </select>
    <!--查询非星级酒店-->
    <select id="queryNoStartLevel" resultMap="BaseResultMap">
        select
        hotelId, hotelName, startLevel, phoneNumber, address
        from hotel
        where startLevel=0
    </select>
    <!--查询星级酒店-->
    <select id="queryHaveStartLevel" resultMap="BaseResultMap">
        select
            hotelId, hotelName, startLevel, phoneNumber, address
        from hotel
        where startLevel!=0
    </select>
</mapper>

